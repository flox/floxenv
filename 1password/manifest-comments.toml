#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(5) for more information.
#
version = 1

[install]
# Packages in Nix can't start with numbers
op.pkg-path = "_1password"

[hook]
on-activate = '''

    # We want something that works whether we have the CLI/GUI
    # integration turned on or not, so let's make a function
    # that sets an env variable from op and passes a token if we
    # have one

    op_inject() {
        local sessionstring secret_value

        [ "$OP_TOKEN" ] && sessionstring="--session $OP_TOKEN"
        secret_value=$(op $sessionstring item get "$2" --field "$3")

        if [ "$secret_value" ]; then
            export "$1=$secret_value"
            echo "op '$2' -> '$1'"
        else
            echo "op '$2' -> not set"
            return 1
        fi
    }
 
    # If we have the 1Password CLI installed and the "CLI
    # integtation" is enabled, the following command will cause
    # it to create a new session and return successfully
    #
    # If not, cache the 1Password session token so we don't
    # have to re-authenticate every time

    if ! op vault list >/dev/null 2>&1; then
        # The location of a file where we store our op session
        OP_CACHE="$HOME/.cache/op-session"

        # Read the token from our cache file - it'll be called OP_TOKEN
        [[ -f "$OP_CACHE" ]] && OP_TOKEN=$(cat "$OP_CACHE")
 
        if ! op whoami --session "${OP_TOKEN}" >/dev/null 2>&1; then
            # The token in the cache is not good, get a new one
            OP_TOKEN=$(op signin --raw 2>&1)

            if [[ $? -eq 0 ]]; then
                # That worked, persist our token into the cache file
                mkdir -p ~/.cache/ && echo "${OP_TOKEN}" > "$OP_CACHE"
                chmod 600 "$OP_CACHE"
                export OP_TOKEN
            else
                # It did not work, let's say something.
                echo "op auth failed!" && return 1
            fi
        fi
    fi

    # We can now use our function to load secrets!
    # Exported variables in 'hook.on-activate' will be picked up
    # by Flox and made available to the user's shell

    op_inject "ANTHROPIC_API_KEY" "Anthropic" "credential"
    op_inject "MAILCHIMP_PASS" "Mailchimp" "password"
'''

[profile]
common = '''
    alias op="op $op_token"
'''

[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]

