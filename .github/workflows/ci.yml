name: "CI"

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  push:
    branches:
      - "main"
  pull_request:
  schedule:
    - cron: "0 0 * * *"

env:
  FLOX_DISABLE_METRICS: "true"

jobs:

  envs:
    name: "Find environments"
    runs-on: "ubuntu-latest"
    timeout-minutes: 30

    outputs:
      envs_per_system: "${{ steps.envs.outputs.envs_per_system }}"
      envs_only: "${{ steps.envs.outputs.envs_only }}"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: "Find environment"
        id: "envs"
        run: |
          envs_per_system="["
          envs_only="["

          update_all=${{ github.event_name == 'schedule' && 'true' || '' }}
          BASE_SHA="${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}"
          if git diff --name-only $BASE_SHA HEAD -- | grep -E "flake.nix|flake.lock|.github" ; then
            echo "detected major change"
            update_all=true
          fi

          while IFS= read manifest_path; do
            env_path=$(realpath -s $(dirname $manifest_path)/../..)
            rel_env_path="${env_path#$PWD/}"
            echo "env_path=$env_path"
            echo "rel_env_path=$rel_env_path"
            if [ -f "$env_path/test.sh" ] && [ "$update_all" == "true" ] || ( git diff --name-only $BASE_SHA HEAD | grep -q "$rel_env_path/" ; ); then
              name=$(basename $env_path)

              num_of_services=$(yq -oy '.services | length' $manifest_path)
              start_services="true"
              if [ "$num_of_services" -eq 0 ]; then
                start_services="false"
              fi

              readarray systems < <(yq e -o=j -I=0 '.options.systems[]' $manifest_path)
              comma_per_system=""
              if [ "$envs_per_system" != "[" ]; then comma_per_system=","; fi
              for system in "${systems[@]}"; do
                system=$(echo $system | xargs)
                envs_per_system="$envs_per_system$comma_per_system{\"example\":\"$name\",\"system\":\"$system\",\"start_services\":$start_services}"
                comma_per_system=","
              done

              comma_only=""
              if [ "$envs_only" != "[" ]; then comma_only=","; fi
              envs_only="$envs_only$comma_only{\"example\":\"$name\"}"
            fi
          done <<< "$(find $PWD -name manifest.toml)"
          envs_per_system="$envs_per_system]"
          envs_only="$envs_only]"

          echo "-- envs_per_system ---------"
          echo "$envs_per_system" | jq
          echo "----------------------------"

          echo "-- envs_only ---------------"
          echo "$envs_only" | jq
          echo "----------------------------"

          echo "envs_per_system=$envs_per_system" >> "$GITHUB_OUTPUT"
          echo "envs_only=$envs_only" >> "$GITHUB_OUTPUT"

  containarize:
    name: "Containarize '${{ matrix.example }}'"
    runs-on: "ubuntu-latest"
    timeout-minutes: 30

    if: (github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'

    needs:
      - "envs"

    env:
      FLOX_BIN: "flox -vvv"


    permissions:
      contents:       "read"
      packages:       "write"
      attestations:   "write"
      id-token:       "write"

    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        include: ${{ fromJSON(needs.envs.outputs.envs_only ) }}

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Install flox"
        uses: "flox/install-flox-action@main"

      - name: "Login to Github Container Registry"
        uses: "docker/login-action@v3"
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: "Containarize"
        run: |
          export NIX_CONFIG='extra-experimental-features = nix-command flakes'
          nix store ping
          flox containerize -vvvv -d ./${{ matrix.example }}
