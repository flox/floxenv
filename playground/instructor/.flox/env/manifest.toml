#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(1) for more information.
#
version = 1

# List packages you wish to install in your environment inside
# the `[install]` section.
[install]
instructor.pkg-path = "python311Packages.instructor"
openai.pkg-path = "python311Packages.openai"
jupyter.pkg-path = "python311Packages.jupyter"
wikipedia.pkg-path = "python311Packages.wikipedia"
ollama.pkg-path = "ollama"
graphviz.pkg-path = "python311Packages.graphviz"
# hello.pkg-path = "hello"
# nodejs = { version = "^18.4.2", pkg-path = "nodejs_18" }

# Set environment variables in the `[vars]` section. These variables may not
# reference one another, and are added to the environment without first
# expanding them. They are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]
# message = "Howdy"

# The `hook.on-activate` script is run by the *bash* shell immediately upon
# activating an environment, and will not be invoked if Flox detects that the
# environment has previously been activated. Variables set by the script will
# be inherited by `[profile]` scripts defined below. Note that any stdout
# generated by the script will be redirected to stderr.
[hook]
# on-activate = """
#   # Set variables, create files and directories
#   venv_dir="$(mktemp -d)"
#   export venv_dir
#
#   # Perform initialization steps, e.g. create a python venv
#   python -m venv "$venv_dir"
# """

# Scripts defined in the `[profile]` section are *sourced* by *your shell* and
# inherit environment variables set in the `[vars]` section and by `[hook]` scripts.
# The `profile.common` script is sourced by all shells and special care should be
# taken to ensure compatibility with all shells. The `profile.bash` and `profile.zsh`
# scripts are then sourced by the corresponding shell.
[profile]
common = """
  # First, check if $OPENAI_API_KEY is set
  if [[ "${OPENAI_API_KEY}" ]]; then
    echo "ðŸ¤– OpenAI configured with key from existing environment"
    return 0
  fi

  # Then, check to see if the dotfile exists
  if [[ -f ~/.config/openai.key ]]; then
    export OPENAI_API_KEY=$(cat ~/.config/openai.key)
    echo "ðŸ¤– OpenAI configured with key from ~/.config/openai.key"
    return 0
  fi

  # We got nothing! Let's ask.
  echo "OpenAI key not detected."
  
  if gum confirm "Would you like to provide one now?" --default=true --affirmative "Yes" --negative "No"; then
    OPENAI_API_KEY=$(gum input --placeholder "OpenAI API key")
    export OPENAI_API_KEY
    if gum confirm "Write this into ~/.config/openai.key for next time?" --default=true --affirmative "Yes" --negative "No"; then
      mkdir -p ~/.config/
      echo "$OPENAI_API_KEY" > ~/.config/openai.key
      chmod 600 ~/.config/openai.key
    fi
    echo "ðŸ¤– OpenAI configured with provided key"
    return 0
  fi

  echo "An OpenAI key is required. You can provide one by setting OPENAI_API_KEY."
  echo; echo "ðŸš¨ OpenAI client is available (no key)"
"""

# Additional options can be set in the `[options]` section. Refer to
# manifest.toml(1) for a list of available options.
[options]
systems = ["x86_64-linux", "aarch64-darwin"]
