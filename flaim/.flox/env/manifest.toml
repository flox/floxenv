version = 1


[install]

pytorch-bin.pkg-path = "python311Packages.pytorch-bin"
pytorch-bin.version = "python3.11-torch-2.4.1"

diffusers.pkg-path = "python311Packages.diffusers"
diffusers.version = "python3.11-diffusers-0.30.0"

accelerate.pkg-path = "python311Packages.accelerate"
accelerate.version = "python3.11-accelerate-1.0.0"

transformers.pkg-path = "python311Packages.transformers"
transformers.version = "python3.11-transformers-4.45.2"

sentencepiece.pkg-path = "python311Packages.sentencepiece"
sentencepiece.version = "python3.11-sentencepiece-0.2.0"

gum.pkg-path = "gum"
figlet.pkg-path = "toilet"

jupyterlab.pkg-path = "python311Packages.jupyterlab"
ipywidgets.pkg-path = "python311Packages.ipywidgets"


[vars]
# This token will be used in the query string for our Jupyter
# server. When you clone this environment for your own uses,
# recommend using a proper Identity Provider.
JUPYTER_SERVER_TOKEN    = "floxfan123456"

VIRTUAL_ENV_DISABLE_PROMPT="1"

# These are example scripts that can be used later on to
# generate a sample image and test acceleration

generate_image="[(importlib := __import__('importlib')), (warnings := importlib.import_module('warnings')), warnings.filterwarnings('ignore'), (sys := importlib.import_module('sys')), (torch := importlib.import_module('torch')), (sixel := importlib.import_module('sixel')), (__ol_mod_tqgdpsmggw := __import__('io', globals(), locals(), ['BytesIO'], 0)), (BytesIO := __ol_mod_tqgdpsmggw.BytesIO), (__ol_mod_rdfadkcuju := __import__('diffusers', globals(), locals(), ['StableDiffusionPipeline'], 0)), (StableDiffusionPipeline := __ol_mod_rdfadkcuju.StableDiffusionPipeline), (__ol_mod_rrergazjfx := __import__('diffusers', globals(), locals(), ['logging'], 0)), (logging := __ol_mod_rrergazjfx.logging), (draw := (lambda image: [(__ol_retv_yarsjpxwtm := None), (buffer := BytesIO()), (writer := sixel.SixelWriter()), image.save(buffer, format='png'), writer.draw(buffer), __ol_retv_yarsjpxwtm][-1])), logging.set_verbosity(50), logging.disable_progress_bar(), (pipe := StableDiffusionPipeline.from_pretrained('IDKiro/sdxs-512-0.9', torch_dtype=torch.float32)), pipe.to('cuda') if torch.cuda.is_available() else pipe.to('mps') if torch.backends.mps.is_available() else ..., (prompt := (sys.argv[1] if len(sys.argv) > 1 else 'a fox in a henhouse')), pipe.set_progress_bar_config(disable=True), (image := pipe(prompt=prompt, num_inference_steps=1, guidance_scale=0).images[0]), image.save(f'{prompt}.png'), draw(image)]"

test_acceleration="[(importlib := __import__('importlib')), (warnings := importlib.import_module('warnings')), warnings.filterwarnings('ignore'), (torch := importlib.import_module('torch')), print('CUDA is available üî•') if torch.cuda.is_available() else print('Metal is available üçè') if torch.backends.mps.is_available() else print('I only see a CPU üòû')]"


[hook]
on-activate = '''
# If there is a requirements.txt file in the current directory,
# let's make our venv in the same place. Otherwise, in the cache.
if [[ -f requirements.txt ]]; then
  export VENV_DIR='./.venv/'
  req_text=1
else
  export VENV_DIR="$FLOX_ENV_CACHE/python"
  req_text=0
fi


# Make the venv if it does not already exist
if [ ! -d "$VENV_DIR" ]; then
  gum spin --spinner dot --title "Creating python venv in $VENV_DIR" -- python3 -m venv "$VENV_DIR"
  if [ "$req_text" == "1" ]; then
    echo "‚úÖ Virtual environment created in $VENV_DIR"
  fi
fi

# Install or update packages in the venv
(
  source "$VENV_DIR/bin/activate"
  gum spin --spinner dot --title "Managing packages in $VENV_DIR" -- pip3 install --quiet sixel
  if [[ -f requirements.txt ]]; then
    gum spin --spinner dot --title "Managing packages in $VENV_DIR" -- pip3 install --quiet -r requirements.txt
  fi
)

toilet -f smmono9 --metal "flaim"
echo ""
$FLOX_ENV/bin/python3 -c "$test_acceleration"
echo "Run 'testaccel' to retest acceleration."
echo "Run 'genimg <string>' for an image."
'''


[profile]
common = '''
if [ -d "$VENV_DIR" ]; then source "$VENV_DIR/bin/activate"; fi

alias genimg="python3 -c \"$generate_image\""
alias testaccel="python3 -c \"$test_acceleration\""

if [[ "$FLOX_ACTIVATE_START_SERVICES" == "true" ]]; then
  echo
  sleep 1
  jupyter-lab list
  echo
fi
'''


[services.jupyter-server]
command = "jupyter-lab --IdentityProvider.token=${JUPYTER_SERVER_TOKEN} --ip=0.0.0.0"


[options]
systems = [
  "aarch64-darwin",
  "aarch64-linux",
#  "x86_64-linux", # ‚ùå ERROR: Failed to build package 'pytorch-bin': error: 1 dependencies of derivation '/nix/store/f18009m3gdj8a43kbw5pl8bir3hxwrp2-python3.11-torch-2.4.1.drv' failed to build
#  "x86_64-darwin",
]
