
#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(5) for more information.
#
version = 1

#
# [install]
# Let's install some packages into our environment!
#

[install]

# Get Python 3.10
python310.pkg-path = "python310"

# Install Weaviate as a vector database
weaviate.pkg-path = "weaviate"
weaviate.version = "1.25.9"

# Install Ollama as a backend
ollama.pkg-path = "ollama"
ollama.version = "0.3.5"

# Nice UI for our hook and profile scripts :)
gum.pkg-path = "gum"

# Deps for our service scripts
bash.pkg-path = "bash"
curl.pkg-path = "curl"


#
# [vars]
# These vars will be available throughout the environment lifecycle
#

[vars]

# The name of the Verba package to install
VERBA_INSTALL_PACKAGE = "goldenverba==1.0.4"
#VERBA_INSTALL_PACKAGE = "goldenverba[huggingface]"

# This configures Weaviate, and configures Verba to use it
WEAVIATE_URL_VERBA = "http://localhost:8080"

# Weaviate data path
PERSISTENCE_DATA_PATH = "./verba-data"

# Leave Weaviate wide open (for now!)
AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED = "true"

# Weaviate query default limit
QUERY_DEFAULTS_LIMIT = "10"

# This configures Verba to use the local Ollama instance
OLLAMA_URL = "http://localhost:11434"

# Our Ollama models
OLLAMA_MODEL = "llama3"
OLLAMA_EMBED_MODEL = "mxbai-embed-large"

# OpenAI configuration
# OPENAI_API_KEY = "makealottanonsensequicklylikehumansdo"
# OPENAI_BASE_URL = "http://100.0.0.0:8000"

# For other Verba variables that can be set here, see:
# https://github.com/weaviate/Verba/blob/main/goldenverba/.env.example

# Values that are *not* set here can be passed in at activation
# time, like this:
# 
#     `OPENAI_API_KEY="xxx" flox activate -s`

# IMO we don't need both Flox and venv to augment our prompt
VIRTUAL_ENV_DISABLE_PROMPT="1"


#
# [hook]
# Since Verba is not (yet) in the Flox catalog, we need to
# install it from pypi using a venv

# We can add a hook that makes sure that Verba is installed
# before we try to start it (or use it!)
#

[hook]
on-activate = '''
  # If we export this here, it can be used later in 'profiles.common'
  export PYTHON_DIR="$FLOX_ENV_CACHE/python"

  if [ ! -d "$PYTHON_DIR" ]; then
    gum spin -s globe --title "Creating venv in $PYTHON_DIR..." -- python -m venv "$PYTHON_DIR"
  fi

  (
    source "$PYTHON_DIR/bin/activate"
    gum spin -s monkey --title "Installing/updating Verba..." -- pip install "$VERBA_INSTALL_PACKAGE"
  )
'''


#
# [services]
# Services are defined here, and are started after hook.on-activate is finished
#

# Start Weaviate
[services.weaviate]
command = "weaviate --host 0.0.0.0 --port 8080 --scheme http"

# Start Ollama
[services.ollama]
command = "ollama serve"

# Start Verba
[services.verba]
command = """
if [[ "$WEAVIATE_URL_VERBA" != "" ]]; then
  until curl -s "$WEAVIATE_URL_VERBA"; do
    echo "waiting for weaviate ..."
    sleep 0.1
  done
fi

$PYTHON_DIR/bin/verba start --host 0.0.0.0
"""


[services.models]
command = """
# wait for ollama to be ready
until ollama list; do
  sleep 0.1
done

ollama pull "$OLLAMA_MODEL"
ollama pull "$OLLAMA_EMBED_MODEL"
"""

#
# [profile]
# The profile scripts are executed in the user's shell, after
# everything else has been done
#

[profile]

common = '''
  # Activate the Python venv
  source "$PYTHON_DIR/bin/activate"
'''

[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-linux"]


